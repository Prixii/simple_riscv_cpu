$date
	Tue May 23 10:47:47 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_test $end
$var wire 1 ! ALU_OverFlow $end
$var wire 16 " ALU_DC [15:0] $end
$var reg 3 # ALU_CTL [2:0] $end
$var reg 16 $ ALU_DA [15:0] $end
$var reg 16 % ALU_DB [15:0] $end
$var reg 4 & ALU_SHIFT [3:0] $end
$scope module U_alu $end
$var wire 3 ' ALU_CTL [2:0] $end
$var wire 16 ( ALU_DA [15:0] $end
$var wire 16 ) ALU_DB [15:0] $end
$var wire 1 ! ALU_OverFlow $end
$var wire 4 * ALU_SHIFT [3:0] $end
$var wire 1 + sub_ctl $end
$var wire 16 , shift_result [15:0] $end
$var wire 2 - shift_ctl [1:0] $end
$var wire 16 . neg_ALU_DB [15:0] $end
$var wire 1 / logic_ctl $end
$var wire 16 0 arthimetic_result [15:0] $end
$var wire 2 1 Operate_CTL [1:0] $end
$var wire 1 2 ADD_carry $end
$var wire 1 3 ADD_OverFlow $end
$var reg 16 4 ALU_DC [15:0] $end
$var reg 16 5 logic_result [15:0] $end
$scope module ADD $end
$var wire 1 + ADD_Cin $end
$var wire 16 6 ADD_DA [15:0] $end
$var wire 16 7 ADD_DB [15:0] $end
$var wire 1 3 ADD_OverFlow $end
$var wire 1 2 ADD_carry $end
$var wire 16 8 ADD_DC [15:0] $end
$upscope $end
$scope module shifter $end
$var wire 16 9 ALU_DA [15:0] $end
$var wire 4 : ALU_SHIFT [3:0] $end
$var wire 2 ; shift_ctl [1:0] $end
$var wire 5 < shift_n [4:0] $end
$var reg 16 = shift_result [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b110011 =
b10000 <
b0 ;
b0 :
b110011 9
b1101110 8
b111011 7
b110011 6
b110011 5
b1101110 4
03
02
b0 1
b1101110 0
0/
b111011 .
b0 -
b110011 ,
0+
b0 *
b111011 )
b110011 (
b0 '
b0 &
b111011 %
b110011 $
b0 #
b1101110 "
z!
$end
#20
b11110000 .
b11110000 7
b11110000 "
b11110000 4
b1 1
b10 -
b10 ;
b11100000 0
b11100000 8
12
b1111111111110000 ,
b1111111111110000 =
b11110000 5
b10 #
b10 '
b11110000 %
b11110000 )
b1111111111110000 $
b1111111111110000 (
b1111111111110000 6
b1111111111110000 9
#40
b1111111100001111 .
b1111111100001111 7
b1111111111110000 "
b1111111111110000 4
b1111111100000000 0
b1111111100000000 8
b1111111111110000 5
1+
1/
b11 -
b11 ;
b11 #
b11 '
#60
b11110000 .
b11110000 7
b11100000 "
b11100000 4
b11100000 0
b11100000 8
b11110000 5
b0 1
0+
0/
b0 -
b0 ;
b0 #
b0 '
